

//tämä tiedosto on generoitu käyttämällä työkalua https://quicktype.io/

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BikeData;
//
//    var bike = Bike.FromJson(jsonString);


namespace BikeData
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Bike
    {
        [JsonProperty("racks")]
        public Dictionary<string, Rack> Racks { get; set; }

        [JsonProperty("operators")]
        public Operators Operators { get; set; }

        [JsonProperty("racks_total")]
        public long RacksTotal { get; set; }

        [JsonProperty("bikes_total_avail")]
        public long BikesTotalAvail { get; set; }

        [JsonProperty("generated")]
        public long Generated { get; set; }

        [JsonProperty("lastupdate")]
        public long Lastupdate { get; set; }
    }

    public partial class Operators
    {
        [JsonProperty("nextbike")]
        public Nextbike Nextbike { get; set; }
    }

    public partial class Nextbike
    {
        [JsonProperty("id")]
        public Id Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("hotline")]
        public string Hotline { get; set; }

        [JsonProperty("website")]
        public Uri Website { get; set; }
    }

    public partial class Rack
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("stop_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StopCode { get; set; }

        [JsonProperty("operator")]
        public Id Operator { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("last_seen")]
        public long LastSeen { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("bikes_avail")]
        public long BikesAvail { get; set; }

        [JsonProperty("slots_total")]
        public long SlotsTotal { get; set; }

        [JsonProperty("slots_avail")]
        public long SlotsAvail { get; set; }
    }

    public enum Id { Nextbike };

    public partial class Bike
    {
        public static Bike FromJson(string json) => JsonConvert.DeserializeObject<Bike>(json, BikeData.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Bike self) => JsonConvert.SerializeObject(self, BikeData.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IdConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class IdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Id) || t == typeof(Id?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "nextbike")
            {
                return Id.Nextbike;
            }
            throw new Exception("Cannot unmarshal type Id");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Id)untypedValue;
            if (value == Id.Nextbike)
            {
                serializer.Serialize(writer, "nextbike");
                return;
            }
            throw new Exception("Cannot marshal type Id");
        }

        public static readonly IdConverter Singleton = new IdConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
